apiVersion: v1
kind: ServiceAccount
metadata:
  name: scaler
  namespace: default

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: scaler
rules:
- apiGroups: ["apps"]
  resources: ["deployments", "deployments/scale"]
  verbs: ["get", "patch", "list"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: scaler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: scaler
subjects:
- kind: ServiceAccount
  name: scaler
  namespace: default

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: scaler
  namespace: default
data:
  restart.sh: |
    #!/bin/bash
    REPLICAS=`kubectl get deployment ${DEPLOYMENT_NAME} -o jsonpath='{.spec.replicas}'`
    if [ $? -ne 0 ]; then
      exit 1
    fi
    if [ $REPLICAS -gt 0 ]; then
      echo "Restarting app"
      kubectl scale deployment ${DEPLOYMENT_NAME} --replicas 0
      sleep 30
      kubectl scale deployment ${DEPLOYMENT_NAME} --replicas $REPLICAS
    else
      echo "Deployment ${DEPLOYMENT_NAME} has 0 replicas, not restarting"
    fi

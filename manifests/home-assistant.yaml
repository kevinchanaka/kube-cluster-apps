apiVersion: apps/v1
kind: Deployment
metadata:
  name: home-assistant
  namespace: default
  labels:
    app: home-assistant
spec:
  replicas: 1
  selector:
    matchLabels:
      app: home-assistant
  template:
    metadata:
      labels:
        app: home-assistant
    spec:
      containers:
      - name: home-assistant
        image: ghcr.io/home-assistant/home-assistant:latest
        env:
        - name: TZ
          value: Australia/Sydney
        volumeMounts:
        - name: home-assistant-config
          mountPath: /config
        ports:
        - containerPort: 8123
        resources:
          requests:
            memory: 250Mi
            cpu: 250m
      hostNetwork: true
      volumes:
      - name: home-assistant-config
        persistentVolumeClaim:
          claimName: home-assistant

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: home-assistant
  namespace: default
spec:
  storageClassName: nfs
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 500Mi

---

apiVersion: v1
kind: Service
metadata:
  name: home-assistant
  namespace: default
spec:
  type: ClusterIP
  selector:
    app: home-assistant
  ports:
    - protocol: TCP
      port: 8123

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: home-assistant
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - homeassistant.lab.kevinf.xyz
    secretName: home-assistant-tls
  rules:
  - host: homeassistant.lab.kevinf.xyz
    http:
      paths:
      - backend:
          service:
            name: home-assistant
            port:
              number: 8123
        path: /
        pathType: Prefix

---

apiVersion: batch/v1
kind: CronJob
metadata:
  name: home-assistant-restart
  namespace: default
spec:
  schedule: "30 3 * * 1"
  timeZone: Australia/Sydney
  startingDeadlineSeconds: 300
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 0
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: kubectl
            image: bitnami/kubectl
            env:
            - name: DEPLOYMENT_NAME
              value: terraria-un-spacey
            command: ["/bin/bash"]
            args: ["/app/restart.sh"]
            volumeMounts:
            - name: script
              mountPath: /app
          volumes:
          - name: script
            configMap:
              name: scaler
          restartPolicy: OnFailure
          serviceAccountName: scaler
